/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	cr�ation : 13 f�vrier 2002
 *
 *     nature : projet etudiant
 *Groupe 1.1
 * CHAPON Théo
 * EL OMARI ALAOUI Hassan
 * MARCHAIS Julien
 * MESDOURI Marouan
 * TUEKAM Marlène
 * Février - Mars 2014
 */


options{
	JDK_VERSION="1.6"; /* 1.5 */
}

PARSER_BEGIN(Yaka)



public class Yaka {
	public static Declaration declaration= new Declaration();
	public static TabIdent tabident = new TabIdent();
	public static Expression expression = new Expression();
	public static YVM yvm = new YVMasm();
	public static Conditionnelle condition = new Conditionnelle();
	public static Fonction fonction = new Fonction();
	public static Iteration iteration = new Iteration();
	
	public static void main(String args[]) {
		Yaka analyseur;
		java.io.InputStream input;
		java.io.OutputStream output;
		java.io.File temp;
		java.io.InputStream tmp = null;
		String fichierOut;
		if (args.length==2) {
			System.out.print(args[0] + ": ");
			try {
				input = new java.io.FileInputStream(args[0] + ".yaka"); /* avant : args.lentgh -1 */
				fichierOut = args[1] + ".asm";
			} catch (java.io.FileNotFoundException e) {
				System.out.println("Fichier introuvable.");
				return;
			}
		} else if (args.length==1) {
			fichierOut = args[0] + ".asm";
			System.out.println("Lecture sur l'entree standard...");
			input = System.in;
		} else {
			System.out.println("Usage: java Yaka [fichier entrée] [fichier sortie] ou java Yaka [fichier sortie]");
			return;
		}
		try {
			analyseur = new Yaka(input);
			analyseur.analyse();
			System.out.println("analyse syntaxique reussie!");
			temp = new java.io.File("yvm.tmp");
			if (Erreur.err) {
				System.out.println("Compilation impossible");
				System.out.println("La g\u00e9n\u00e9ration du fichier a \u00e9chou\u00e9");
			}
			else {
				yvm.recopierEntete(fichierOut);
				try {
					tmp = new java.io.FileInputStream(temp);
				} catch (java.io.FileNotFoundException e) {
					e.printStackTrace();
				}
				output = Ecriture.ouvrirSuite(fichierOut);
				Ecriture.ecrireFichier(output,tmp);
				Ecriture.fermer(output);
				Lecture.fermer(tmp);
				System.out.println("Le fichier `" + fichierOut + "` a \u00e9t\u00e9 g\u00e9n\u00e9r\u00e9 avec succ\u00e8s");
			}
			temp.delete(); /* suppression du ficher temporaire */
		} catch (ParseException e) {
			String msg = e.getMessage();
			msg = msg.substring(0,msg.indexOf("\u005cn"));
			System.out.println("Erreur de syntaxe : "+msg);
		}
	}
}
PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{
public static String identLu,chaineLue;
public static int entierLu;
}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots r�serv�s*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < ERREUR: "ERREUR" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME : "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}
/* Operateurs */
TOKEN :
{
	<ADD : "+">
	| <SUBNEG : "-">
	| <OR : "OR">
	| <MUL : "*">
	| <DIV : "/">
	| <AND : "AND">
	| <NOT : "NOT">
	| <EGAL : "=">
	| <DIFF : "<>">
	| <INF : "<">
	| <INFEGAL : "<=">
	| <SUP : ">">
	| <SUPEGAL : ">=">
}

/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre : ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
   <PROGRAMME>
   <ident>
   (declFonction())*
   <PRINCIPAL>
	{
		yvm.debut();
		yvm.ecrireEtiqu("main");
	}
   bloc()
   <FPRINCIPAL>
   <FPROGRAMME>
   {
		yvm.queue();
	}
}

void declFonction():{}
{
	{
		declaration.inFunction(true);
	}
	typeF() <FONCTION> <ident>
	{
		String ident = YakaTokenManager.identLu;
		yvm.ecrireEtiqu(ident);
	}
	paramForms()
	{
		tabident.rangeParam();
	}
	bloc()
	<FFONCTION>
	{
		declaration.ajoutNomFonction(ident);
		expression.fermeBloc(ident);
		tabident.clearFun();
		declaration.inFunction(false);
	}
}

void typeF():{}
{
	<ENTIER>
  	{
  		declaration.ajoutFonction(YakaConstants.ENTIER);
  	}		
 | <BOOLEEN>
  	{
  		declaration.ajoutFonction(YakaConstants.BOOLEEN);
  	}
}

void paramForms():{}
{
	"("(paramForm() ("," paramForm())*)?")"
}

void paramForm():{}
{
	type() <ident>
	{
		declaration.addParam(YakaTokenManager.identLu);
	}
}

void bloc() : {}{
 (declConst())*
 (declVar())*
	{yvm.ouvbloc(tabident.nbVar() * 2);}
   suiteInstr() 
}

void declConst() : {}
{
  <CONST> defConst() ( "," defConst())* ";"
  
}

void defConst() : {}
{
	
  <ident> 
  {
  	declaration.ajoutNomConstante(YakaTokenManager.identLu);
  }
   "=" valConst()
 
}

void valConst() : {}{
  <entier>
   {
   	declaration.ajoutConstanteParEntier(YakaTokenManager.entierLu);
  }
  |"-" <entier>
  {
   	declaration.ajoutConstanteParEntier(YakaTokenManager.entierLu*-1);
  }
  | <ident>
  {
  	declaration.ajoutConstanteParConstante(YakaTokenManager.identLu);
  }
 | <VRAI> 
  {
  	declaration.ajoutConstanteParBooleen(-1);
  }		
 | <FAUX> 
  {
  	declaration.ajoutConstanteParBooleen(0);
  }		
}


void declVar() : {}
{
  <VAR>
  type()
  <ident>
  {
	declaration.ajoutNomVariable(YakaTokenManager.identLu);
  }
  ("," 
      <ident>
      {
	declaration.ajoutNomVariableSecondaire(YakaTokenManager.identLu);
      }
  )* ";"
	
}

void type() :{}
{
   <ENTIER>
  	{
  		declaration.ajoutVariableParTYPE(YakaConstants.ENTIER);
  	}		
 | <BOOLEEN>
  	{
  		declaration.ajoutVariableParTYPE(YakaConstants.BOOLEEN);
  	}
}
/*
 * Syntaxe des instructions.
 */
void suiteInstr() : {}
{
	instruction()
	(
		";" (
				instruction()
			)?
	)*
}


void instruction() : {}
{
	affectation() | lecture() | ecriture() | conditionnelle() | iteration() | retourne()
}

void retourne():{}
{
	<RETOURNE> expression()
	{
		expression.testInFunc();
		expression.testTypeExprFunc();
		expression.returnFun();
	}
}

void iteration():{}
{
	<TANTQUE>
	{
		iteration.addTantQue();
		iteration.ecrireFaire();
	}
	expression()
	{
		expression.testBool();
		iteration.ecrireIffauxFait();
	}
	<FAIRE> suiteInstr()
	{
		iteration.ecrireGotoFaire();
	}
	<FAIT>
	{
		iteration.ecrireFait();
		iteration.removeTantQue();
	}
}

void conditionnelle():{}
{
	<SI>
	{
		condition.addSi();
	}
	expression()
	{
		expression.testBool();
		condition.ecrireIffauxSinon();
	}
	<ALORS> suiteInstr()
	{
		condition.ecrireGotoFSI();
		condition.ecrireSinon();
	}
	(<SINON> suiteInstr())?
	 <FSI>
	{
		condition.ecrireFsi();
		condition.removeSi();
	}
}

void affectation() : {}
{
	<ident>
	{
		String id = YakaTokenManager.identLu;
	}
	
	"="
	
	expression()
	{
		expression.store(id);
		/* Vider les piles pour évaluer une autre expression */
		expression.clearType();
		expression.clearOp();
	}
}

void lecture() : {}
{
	<LIRE> "(" <ident> ")"
	{
		expression.lire(YakaTokenManager.identLu);
	}
}

void ecriture() : {}
{
	<ECRIRE> "("( 
	expression()
	{
		expression.ecrire();
	}
	| 
	<chaine> 
	{
		yvm.ecrireChaine(YakaTokenManager.chaineLue);
	}
	)")" | 
	<ALALIGNE>
	{
		yvm.aLaLigne();
	}
}


/*
 * Expression .
 */
 
void expression() : {}
{
  simpleExpr() 
(
  opRel()
  simpleExpr() 
{
	expression.testRel();
	expression.executerOpRel();
} 
  )?
{
}
}



void simpleExpr() : {}
{
   terme() 
   (
   
   opAdd()
   terme()
   {
	   
	   expression.testAdd();
	   expression.executerOpAdd();
	}
   )*
} 
void terme() : {}
{
  facteur() 
  (
  opMul()
  facteur()
   {
	   
	   expression.testMul();
	   expression.executerOpMul();
	}
  )*
}
void facteur() : {}
{   primaire() 
  |  
  opNeg()
	primaire()
  {
	  
	   expression.testNeg();
	  expression.executerOpNeg();
	}
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {}
{ <entier> 	
	{
		expression.empileType(YakaConstants.ENTIER);
		yvm.iconst(YakaTokenManager.entierLu);
	}
 | <ident>
	 {
		expression.empileTypeAvecIdent(YakaTokenManager.identLu);
		expression.loadIdent(YakaTokenManager.identLu);
	 }
	(
		{
			String id = YakaTokenManager.identLu;
			tabident.identIsFunction(id);
			tabident.newFun();
			expression.newFun(id);
			yvm.reserveRetour();
		}
		argumentsFonction()
		{
			tabident.testNbParam(id);
			tabident.resetParamTest();
			expression.call();
			expression.empileTypeFun();
			expression.resetFun();
		}
	)?
 | <VRAI> 
	{
		expression.empileType(YakaConstants.BOOLEEN);
		yvm.iconst(-1);
	}
 | <FAUX> 
	{
		expression.empileType(YakaConstants.BOOLEEN);
		yvm.iconst(0);
	}
 
}

void argumentsFonction():{}
{
	"("(
	expression()
	{
		tabident.addParamForTest();
		expression.testParamFonc();
	}
	("," 
	expression()
	{
		tabident.addParamForTest();
		expression.testParamFonc();
	}
	)*)?")"
}

void opRel() : {}
{
   "=" 	
  {
	  expression.empileOpera(YakaConstants.EGAL);
	}
 | "<>" 
  {
	  expression.empileOpera(YakaConstants.DIFF);
  }
 | "<" 	
  {
	  expression.empileOpera(YakaConstants.INF);
  }
 | "<=" 
  {
	  expression.empileOpera(YakaConstants.INFEGAL);
  }
 | ">" 	
  {
	  expression.empileOpera(YakaConstants.SUP);
  }
 | ">=" 
  {
	  expression.empileOpera(YakaConstants.SUPEGAL);
  }
} 

void opAdd() : {}
{
    "+"
  {
	  expression.empileOpera(YakaConstants.ADD);
	}
  |  "-" 
  {
	  expression.empileOpera(YakaConstants.SUBNEG);
	}
  | <OU> 
  {
	  expression.empileOpera(YakaConstants.OR);
	}
}

void opMul() : {}
{
  "*"	
  {
	expression.empileOpera(YakaConstants.MUL);
  }
  | "/"	
  {
	expression.empileOpera(YakaConstants.DIV);
  }
  | <ET>	
  {
	  expression.empileOpera(YakaConstants.AND);
	}
} 

void opNeg() : {}
{ "-" 
  {
	  expression.empileOpera(YakaConstants.SUBNEG);
  }
 | <NON>
  {
	  expression.empileOpera(YakaConstants.NOT);
  }
}
/* on ne peut pas faire opneg pour une expression */
