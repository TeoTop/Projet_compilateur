/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	cr�ation : 13 f�vrier 2002
 *
 *     nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)



public class Yaka {


  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input;

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.analyse();
      System.out.println("analyse syntaxique reussie!");
      if (Erreur.err) {
    	  System.out.println("Compilation impossible");
      }
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{
public static String identLu,chaineLue;
public static int entierLu;
public static Declaration declaration= new Declaration();
public static Expression expression = new Expression();
public static TabIdent tabident;
public static YVM yvm;
}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots r�serv�s*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME : "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre : ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{
	{
		YakaTokenManager.tabident = new TabIdent();
	}
   <PROGRAMME>
   <ident>	
   bloc()
   <FPROGRAMME> 
}

void bloc() : {}{
 (declConst())*
 (declVar())*		
   suiteExpr() 
}

void declConst() : {}
{
  <CONST> defConst() ( "," defConst())* ";"
  
}

void defConst() : {}
{
	
  <ident> 
  {
  	YakaTokenManager.declaration.ajoutNomConstante(YakaTokenManager.identLu);
  }
   "=" valConst()
 
}

void valConst() : {}{
  <entier>
   {
   	YakaTokenManager.declaration.ajoutConstanteParEntier(YakaTokenManager.entierLu);
  }
  |"-" <entier>
  {
   	YakaTokenManager.declaration.ajoutConstanteParEntier(YakaTokenManager.entierLu*-1);
  }
  | <ident>
  {
  	YakaTokenManager.declaration.ajoutConstanteParConstante(YakaTokenManager.identLu);
  }
 | <VRAI> 
  {
  	YakaTokenManager.declaration.ajoutConstanteParBooleen(-1);
  }		
 | <FAUX> 
  {
  	YakaTokenManager.declaration.ajoutConstanteParBooleen(0);
  }		
}


void declVar() : {}
{
  <VAR>
  type()	
  <ident>
  {
	YakaTokenManager.declaration.ajoutNomVariable(YakaTokenManager.identLu);
  }
  ("," 
      <ident>
      {
	YakaTokenManager.declaration.ajoutNomVariableSecondaire(YakaTokenManager.identLu);
      }
  )* ";"
	
}

void type() :{}
{
   <ENTIER>
  	{
  		YakaTokenManager.declaration.ajoutVariableParTYPE("ENTIER");
  	}		
 | <BOOLEEN>	
  	{
  		YakaTokenManager.declaration.ajoutVariableParTYPE("BOOLEEN");
  	}
}
/*
 * Syntaxe des instructions.
 */
void suiteExpr() : {}
{ (expression() (";" (expression())? )*)? }



/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() 
  (opRel()
{
	YakaTokenManager.expression.empileOpera(YakaTokenManager.identLu);
}
  simpleExpr() 
  )?
{
    /* Vider les piles pour évaluer une autre expression */
	YakaTokenManager.expression.clearType();
	YakaTokenManager.expression.clearOp();
}
}



void simpleExpr() : {}
{
   terme() 
   (opAdd() 
   terme()
   {YakaTokenManager.expression.testAdd();}
   )*
} 
void terme() : {}
{
  facteur() 
  (opMul() 
  facteur()
  {YakaTokenManager.expression.testMul();}
  )*
}
void facteur() : {}
{   primaire() 
  |  opNeg()

	primaire() 
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {}
{ <entier> 	
	{
		YakaTokenManager.expression.empileType("entier");
	}
 | <ident>
	 {
	  YakaTokenManager.expression.empileTypeAvecIdent(YakaTokenManager.identLu);
	 }
 | <VRAI> 
	{
		YakaTokenManager.expression.empileType("booleen");
	}		
 | <FAUX> 
	{
		YakaTokenManager.expression.empileType("booleen");
	}		
 
}

void opRel() : {}
{
   "=" 	
  {YakaTokenManager.expression.empileOpera("=");}	
 | "<>" 
  {YakaTokenManager.expression.empileOpera("<>");}		
 | "<" 	
  {YakaTokenManager.expression.empileOpera("<");}		
 | "<=" 
  {YakaTokenManager.expression.empileOpera("<=");}		
 | ">" 	
  {YakaTokenManager.expression.empileOpera(">");}		
 | ">=" 
  {YakaTokenManager.expression.empileOpera(">=");}		
} 

void opAdd() : {}
{
    "+"
  {YakaTokenManager.expression.empileOpera("+");}		
  |  "-" 
  {YakaTokenManager.expression.empileOpera("-");} 
  | <OU> 
  {YakaTokenManager.expression.empileOpera("ou");}	
}

void opMul() : {}
{
  "*"	
  {YakaTokenManager.expression.empileOpera("*");}	
  | "/"	
  {YakaTokenManager.expression.empileOpera("/");}	
  | <ET>	
  {YakaTokenManager.expression.empileOpera("et");}
} 

void opNeg() : {}
{ "-" 
  {YakaTokenManager.expression.empileOpera("-");}		
 | <NON>
  {YakaTokenManager.expression.empileOpera("non");}	
}

